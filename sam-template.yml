AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  BookParserApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: dev
      Models:
        BookParsingRequest:
          type: object
          required:
            - url
          properties:
            url:
              type: string
  BookPagesUrlQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 2
      MessageRetentionPeriod: 14400 # in seconds, 4 hours
      QueueName: 'book-pages-url-queue'
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300 # in seconds
  BookParsingRequestQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 2
      MessageRetentionPeriod: 14400 # in seconds, 4 hours
      QueueName: 'book-parsing-request-queue'
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300 # in seconds
  BooksBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-books"
  BookParserLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookParser::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          QUEUE_NAME: !Ref BookParsingRequestQueue
      Policies:
        # Policy that allows Lambda function to send messages to the queue with a given name
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BookParsingRequestQueue.QueueName
      Events:
        BookParserApiEvent:
          Type: Api
          Properties:
            Path: /books
            Method: post
            RequestModel:
              Model: BookParsingRequest
              Required: true
            RestApiId:
              Ref: BookParserApi

  BookPagesURLFetcherLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesURLFetcher::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          QUEUE_NAME: !Ref BookPagesUrlQueue
      Policies:
        # Policy that allows Lambda function to send messages to the queue with a given name
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BookPagesUrlQueue.QueueName
      Events:
        BookParsingRequestSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BookParsingRequestQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 60

  BookPageLoaderLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesLoader::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to write objects into an Amazon S3 bucket
        - S3WritePolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        BookPageUrlSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BookPagesUrlQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 60

  BookPagesAssemblerLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesAssembler::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to read, write, and delete objects in an Amazon S3 bucket
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        BookLastPageUploadedS3Event:
          Type: S3
          Properties:
            Bucket: !Ref BooksBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: 'last.png'

  BookPagesWiperLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesWiper::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to read, write, and delete objects in an Amazon S3 bucket
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        PdfDocumentUploadedS3Event:
          Type: S3
          Properties:
            Bucket: !Ref BooksBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.pdf'

  BookReadinessNotifier:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookReadinessNotifier::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Policies:
        # Policy that allows Lambda function to read, write, and delete objects in an Amazon S3 bucket
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        PdfDocumentUploadedS3Event:
          Type: S3
          Properties:
            Bucket: !Ref BooksBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.pdf'
