AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  BookParserApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: dev
      Models:
        BookParsingRequest:
          type: object
          required:
            - url
          properties:
            url:
              type: string
  BookPagesUrlQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 2
      MessageRetentionPeriod: 14400 # in seconds, 4 hours
      QueueName: 'book-pages-url-queue'
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300 # in seconds
  BooksBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'oqu-kerek-books'
  BookParserLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookHandler::handleRequest
      MemorySize: 512
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          QUEUE_NAME: !Ref BookPagesUrlQueue
      Policies:
        # Policy that allows Lambda function to send messages to the queue with a given name
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BookPagesUrlQueue.QueueName
      Events:
        BookParserApiEvent:
          Type: Api
          Properties:
            Path: /books
            Method: post
            RequestModel:
              Model: BookParsingRequest
              Required: true
            RestApiId:
              Ref: BookParserApi

  BookPageLoaderLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPageLoader::handleRequest
      MemorySize: 512
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref BooksBucket
      Policies:
        # Policy that allows Lambda function to write objects into an Amazon S3 bucket
        - S3WritePolicy:
            BucketName: !Ref BooksBucket
      Events:
        BookPageUrlSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BookPagesUrlQueue.Arn
            BatchSize: 2
            MaximumBatchingWindowInSeconds: 60
