AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  GoogleClientID:
    Type: String
    Description: Client ID for Google auth client
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: Client's secret for Google auth client
Resources:
  BookParserApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Forwarded-For'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Auth:
        Authorizers:
          CognitoWithGoogleSignInAuthorizer:
            AuthorizationScope:
              - email
              - openid
              - profile
            UserPoolArn: !GetAtt ApiUserPool.Arn
            Identity:
              # Header: Authorization # (by default)
              ReauthorizeEvery: 300 # in seconds, max is 3600s = 1h
        DefaultAuthorizer: CognitoWithGoogleSignInAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
      Models:
        BookParsingRequest:
          type: object
          required:
            - url
          properties:
            url:
              type: string
  ApiUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      MfaConfiguration: 'OFF'
      UsernameConfiguration:
        CaseSensitive: false
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
  ApiUserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      UserPoolId: !Ref ApiUserPool
      Domain: !Sub ${AWS::StackName}
  ApiUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref ApiUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - https://example.com
      ClientName: !Sub "${AWS::StackName}-user-pool-web-app-client"
      SupportedIdentityProviders:
        - !Ref ApiUserPoolGoogleIdentityProvider

  ApiUserPoolGoogleIdentityProvider:
    Type: 'AWS::Cognito::UserPoolIdentityProvider'
    Properties:
      UserPoolId: !Ref ApiUserPool
      ProviderName: 'Google'
      ProviderDetails:
        client_id: !Ref GoogleClientID
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: 'profile email openid'
      ProviderType: 'Google'
      AttributeMapping:
        email: 'email'
        family_name: 'family_name'
        given_name: 'given_name'
        name: 'name'
        picture: 'picture'
        username: 'sub'

  # ---- Queues ----

  BookParsingRequestQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 2
      MessageRetentionPeriod: 14400 # in seconds, 4 hours
      QueueName: 'book-parsing-request-queue'
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300 # in seconds
  BookPagesUrlQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      DeduplicationScope: 'messageGroup'
      FifoThroughputLimit: 'perMessageGroupId'
      DelaySeconds: 2
      MessageRetentionPeriod: 14400 # in seconds, 4 hours
      QueueName: 'book-pages-url-queue.fifo'
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300 # in seconds

  # ---- Buckets ----

  BooksBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-books"


  # ---- Functions ----

  BookParserLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookParser::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          QUEUE_NAME: !Ref BookParsingRequestQueue
      Policies:
        # Policy that allows Lambda function to send messages to the queue with a given name
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BookParsingRequestQueue.QueueName
      Events:
        BookParserApiEvent:
          Type: Api
          Properties:
            Path: /books
            Method: post
            RequestModel:
              Model: BookParsingRequest
              Required: true
            RestApiId:
              Ref: BookParserApi

  BookPagesURLFetcherLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesURLFetcher::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          QUEUE_NAME: !Ref BookPagesUrlQueue
          BOOKS_BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to send messages to the queue with a given name
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BookPagesUrlQueue.QueueName
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        BookParsingRequestSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BookParsingRequestQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 60

  BookPageLoaderLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesLoader::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to write objects into an Amazon S3 bucket
        - S3WritePolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        BookPageUrlSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BookPagesUrlQueue.Arn
            BatchSize: 10

  BookPagesAssemblerLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesAssembler::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to read, write, and delete objects in an Amazon S3 bucket
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        BookLastPageUploadedS3Event:
          Type: S3
          Properties:
            Bucket: !Ref BooksBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: 'last.png'

  BookPagesWiperLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookPagesWiper::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-books"
      Policies:
        # Policy that allows Lambda function to read, write, and delete objects in an Amazon S3 bucket
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
      Events:
        PdfDocumentUploadedS3Event:
          Type: S3
          Properties:
            Bucket: !Ref BooksBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.pdf'

  BookReadinessNotifierLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: java11
      Handler: org.serverless.oqu.kerek.BookReadinessNotifier::handleRequest
      MemorySize: 1024
      Timeout: 300
      CodeUri: build/distributions/oqu-kerek-app-0.1.0.zip
      Policies:
        # Policy that allows Lambda function to read, write, and delete objects in an Amazon S3 bucket
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-books"
        # Policy that allows Lambda function to send email and verify identity
        - SESCrudPolicy:
            IdentityName: 'dauren_del@mail.ru'
        - SESCrudPolicy:
            IdentityName: 'dauren.del@gmail.com'
      Events:
        PdfDocumentUploadedS3Event:
          Type: S3
          Properties:
            Bucket: !Ref BooksBucket
            Events: s3:ObjectRemoved:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: 'last.png'
